<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>netstandard2.0</TargetFramework>
		<LangVersion>latest</LangVersion>
		<Nullable>enable</Nullable>
	</PropertyGroup>
	<PropertyGroup>
		<IsPackable>true</IsPackable>
		<Version>0.1.0</Version>
		<Title>Balu.Sdk</Title>
		<Authors>Ren√© Vogt</Authors>
		<Description>The Balu language SDK.</Description>
		<PackageTags>Balu</PackageTags>
		<TargetsForTfmSpecificBuildOutput>
			$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage
		</TargetsForTfmSpecificBuildOutput>
		<!-- This property tells MSBuild where the root folder of the package's build assets should be. Because we are not a library package, we should not pack to 'lib'. Instead, we choose 'tasks' by convention. -->
		<BuildOutputTargetFolder>tasks</BuildOutputTargetFolder>
		<!-- NuGet does validation that libraries in a package are exposed as dependencies, but we _explicitly_ do not want that behavior for MSBuild tasks. They are isolated by design. Therefore we ignore this specific warning. -->
		<NoWarn>NU5100</NoWarn>
		<GenerateDependencyFile>true</GenerateDependencyFile>
		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.Build.Utilities.Core" Version="17.4.0" PrivateAssets="all" ExcludeAssets="Runtime" />
	</ItemGroup>
	<ItemGroup>
		<!-- these lines pack the build props/targets files to the `build` folder in the generated package.
 		by convention, the .NET SDK will look for build\<Package Id>.props and build\<Package Id>.targets
 		for automatic inclusion in the build. -->
		<Content Include="Sdk.props" PackagePath="sdk\" />
		<Content Include="Sdk.targets" PackagePath="sdk\" />
	</ItemGroup>

	<Target Name="CopyProjectReferencesToPackage" DependsOnTargets="ResolveReferences">
		<ItemGroup>
			<!-- The TargetPath is the path inside the package that the source file will be placed. This is already precomputed in the ReferenceCopyLocalPaths items' DestinationSubPath, so reuse it here. -->
			<BuildOutputInPackage Include="@(ReferenceCopyLocalPaths)" TargetPath="%(ReferenceCopyLocalPaths.DestinationSubPath)" />
		</ItemGroup>
	</Target>
	<Target Name="AddBuildDependencyFileToBuiltProjectOutputGroupOutput" BeforeTargets="BuiltProjectOutputGroup" Condition=" '$(GenerateDependencyFile)' == 'true'">

		<ItemGroup>
			<BuiltProjectOutputGroupOutput Include="$(ProjectDepsFilePath)" TargetPath="$(ProjectDepsFileName)" FinalOutputPath="$(ProjectDepsFilePath)" />
		</ItemGroup>
	</Target>
</Project>
