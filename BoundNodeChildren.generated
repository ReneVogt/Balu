using System;
using System.Collections.Generic;
using System.Collections.Immutable;
namespace Balu.Binding
{
    partial class BoundAssignmentExpression
    {
        public override int ChildrenCount => 1;
        public override Balu.Binding.BoundNode GetChild(int index) => index == 0 ? Expression : throw new ArgumentOutOfRangeException("index");
    }
}
namespace Balu.Binding
{
    partial class BoundBinaryExpression
    {
        public override int ChildrenCount => 2;
        public override Balu.Binding.BoundNode GetChild(int index)
        {
            switch(index)
            {
                case 0: return Left;
                case 1: return Right;
            }
            throw new ArgumentOutOfRangeException("index");
        }
    }
}
namespace Balu.Binding
{
    partial class BoundBlockStatement
    {
        public override int ChildrenCount => Statements.Length;
        public override Balu.Binding.BoundNode GetChild(int index) => Statements[index];
    }
}
namespace Balu.Binding
{
    partial class BoundCallExpression
    {
        public override int ChildrenCount => Arguments.Length;
        public override Balu.Binding.BoundNode GetChild(int index) => Arguments[index];
    }
}
namespace Balu.Binding
{
    partial class BoundConditionalGotoStatement
    {
        public override int ChildrenCount => 1;
        public override Balu.Binding.BoundNode GetChild(int index) => index == 0 ? Condition : throw new ArgumentOutOfRangeException("index");
    }
}
namespace Balu.Binding
{
    partial class BoundConversionExpression
    {
        public override int ChildrenCount => 1;
        public override Balu.Binding.BoundNode GetChild(int index) => index == 0 ? Expression : throw new ArgumentOutOfRangeException("index");
    }
}
namespace Balu.Binding
{
    partial class BoundDoWhileStatement
    {
        public override int ChildrenCount => 2;
        public override Balu.Binding.BoundNode GetChild(int index)
        {
            switch(index)
            {
                case 0: return Body;
                case 1: return Condition;
            }
            throw new ArgumentOutOfRangeException("index");
        }
    }
}
namespace Balu.Binding
{
    partial class BoundErrorExpression
    {
        public override int ChildrenCount => 0;
        public override Balu.Binding.BoundNode GetChild(int index) => throw new ArgumentOutOfRangeException("index");
    }
}
namespace Balu.Binding
{
    partial class BoundExpressionStatement
    {
        public override int ChildrenCount => 1;
        public override Balu.Binding.BoundNode GetChild(int index) => index == 0 ? Expression : throw new ArgumentOutOfRangeException("index");
    }
}
namespace Balu.Binding
{
    partial class BoundForStatement
    {
        public override int ChildrenCount => 3;
        public override Balu.Binding.BoundNode GetChild(int index)
        {
            switch(index)
            {
                case 0: return LowerBound;
                case 1: return UpperBound;
                case 2: return Body;
            }
            throw new ArgumentOutOfRangeException("index");
        }
    }
}
namespace Balu.Binding
{
    partial class BoundGotoStatement
    {
        public override int ChildrenCount => 0;
        public override Balu.Binding.BoundNode GetChild(int index) => throw new ArgumentOutOfRangeException("index");
    }
}
namespace Balu.Binding
{
    partial class BoundIfStatement
    {
        public override int ChildrenCount
        {
            get
            {
                int count = 2;
                if (ElseStatement is not null) count++;
                return count;
            }
        }
        public override Balu.Binding.BoundNode GetChild(int index)
        {
            if (index < 0) throw new ArgumentOutOfRangeException("index");
            switch(index)
            {
                case 0: return Condition;
                case 1: return ThenStatement;
            }
            int adjustedIndex = index, propIndex = 2;
            if (ElseStatement is null) adjustedIndex++;
            else if (adjustedIndex == propIndex) return ElseStatement;
            throw new ArgumentOutOfRangeException("index");
        }
    }
}
namespace Balu.Binding
{
    partial class BoundLabelStatement
    {
        public override int ChildrenCount => 0;
        public override Balu.Binding.BoundNode GetChild(int index) => throw new ArgumentOutOfRangeException("index");
    }
}
namespace Balu.Binding
{
    partial class BoundLiteralExpression
    {
        public override int ChildrenCount => 0;
        public override Balu.Binding.BoundNode GetChild(int index) => throw new ArgumentOutOfRangeException("index");
    }
}
namespace Balu.Binding
{
    partial class BoundNopStatement
    {
        public override int ChildrenCount => 0;
        public override Balu.Binding.BoundNode GetChild(int index) => throw new ArgumentOutOfRangeException("index");
    }
}
namespace Balu.Binding
{
    partial class BoundReturnStatement
    {
        public override int ChildrenCount => Expression is null ? 0 : 1;
        public override Balu.Binding.BoundNode GetChild(int index) => Expression is not null && index == 0 ? Expression : throw new ArgumentOutOfRangeException("index");
    }
}
namespace Balu.Binding
{
    partial class BoundSequencePointStatement
    {
        public override int ChildrenCount => 1;
        public override Balu.Binding.BoundNode GetChild(int index) => index == 0 ? Statement : throw new ArgumentOutOfRangeException("index");
    }
}
namespace Balu.Binding
{
    partial class BoundUnaryExpression
    {
        public override int ChildrenCount => 1;
        public override Balu.Binding.BoundNode GetChild(int index) => index == 0 ? Operand : throw new ArgumentOutOfRangeException("index");
    }
}
namespace Balu.Binding
{
    partial class BoundVariableDeclarationStatement
    {
        public override int ChildrenCount => 1;
        public override Balu.Binding.BoundNode GetChild(int index) => index == 0 ? Expression : throw new ArgumentOutOfRangeException("index");
    }
}
namespace Balu.Binding
{
    partial class BoundVariableExpression
    {
        public override int ChildrenCount => 0;
        public override Balu.Binding.BoundNode GetChild(int index) => throw new ArgumentOutOfRangeException("index");
    }
}
namespace Balu.Binding
{
    partial class BoundWhileStatement
    {
        public override int ChildrenCount => 2;
        public override Balu.Binding.BoundNode GetChild(int index)
        {
            switch(index)
            {
                case 0: return Condition;
                case 1: return Body;
            }
            throw new ArgumentOutOfRangeException("index");
        }
    }
}
