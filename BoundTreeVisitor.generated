using System;

namespace Balu.Binding;

abstract class BoundTreeVisitor
{
    public virtual void Visit(BoundNode node)
    {
        switch (node.Kind)
        {
            case BoundNodeKind.UnaryExpression:
                VisitBoundUnaryExpression((BoundUnaryExpression)node);
                break;
            case BoundNodeKind.BinaryExpression:
                VisitBoundBinaryExpression((BoundBinaryExpression)node);
                break;
            case BoundNodeKind.LiteralExpression:
                VisitBoundLiteralExpression((BoundLiteralExpression)node);
                break;
            case BoundNodeKind.VariableExpression:
                VisitBoundVariableExpression((BoundVariableExpression)node);
                break;
            case BoundNodeKind.AssignmentExpression:
                VisitBoundAssignmentExpression((BoundAssignmentExpression)node);
                break;
            case BoundNodeKind.CallExpression:
                VisitBoundCallExpression((BoundCallExpression)node);
                break;
            case BoundNodeKind.ConversionExpression:
                VisitBoundConversionExpression((BoundConversionExpression)node);
                break;
            case BoundNodeKind.ErrorExpression:
                VisitBoundErrorExpression((BoundErrorExpression)node);
                break;
            case BoundNodeKind.BlockStatement:
                VisitBoundBlockStatement((BoundBlockStatement)node);
                break;
            case BoundNodeKind.ExpressionStatement:
                VisitBoundExpressionStatement((BoundExpressionStatement)node);
                break;
            case BoundNodeKind.VariableDeclarationStatement:
                VisitBoundVariableDeclarationStatement((BoundVariableDeclarationStatement)node);
                break;
            case BoundNodeKind.IfStatement:
                VisitBoundIfStatement((BoundIfStatement)node);
                break;
            case BoundNodeKind.WhileStatement:
                VisitBoundWhileStatement((BoundWhileStatement)node);
                break;
            case BoundNodeKind.DoWhileStatement:
                VisitBoundDoWhileStatement((BoundDoWhileStatement)node);
                break;
            case BoundNodeKind.ForStatement:
                VisitBoundForStatement((BoundForStatement)node);
                break;
            case BoundNodeKind.GotoStatement:
                VisitBoundGotoStatement((BoundGotoStatement)node);
                break;
            case BoundNodeKind.ConditionalGotoStatement:
                VisitBoundConditionalGotoStatement((BoundConditionalGotoStatement)node);
                break;
            case BoundNodeKind.LabelStatement:
                VisitBoundLabelStatement((BoundLabelStatement)node);
                break;
            case BoundNodeKind.ReturnStatement:
                VisitBoundReturnStatement((BoundReturnStatement)node);
                break;
            case BoundNodeKind.NopStatement:
                VisitBoundNopStatement((BoundNopStatement)node);
                break;
            case BoundNodeKind.SequencePointStatement:
                VisitBoundSequencePointStatement((BoundSequencePointStatement)node);
                break;
            default:
                throw new ArgumentException($"Unexpected bound node kind '{node.Kind}'.");
        }
    }
    
    void VisitChildren(BoundNode node)
    {
        for (int i=0; i<node.ChildrenCount; i++) Visit(node.GetChild(i));
    }
    
    protected virtual void VisitBoundUnaryExpression(BoundUnaryExpression node) => VisitChildren(node);
    protected virtual void VisitBoundBinaryExpression(BoundBinaryExpression node) => VisitChildren(node);
    protected virtual void VisitBoundLiteralExpression(BoundLiteralExpression node) => VisitChildren(node);
    protected virtual void VisitBoundVariableExpression(BoundVariableExpression node) => VisitChildren(node);
    protected virtual void VisitBoundAssignmentExpression(BoundAssignmentExpression node) => VisitChildren(node);
    protected virtual void VisitBoundCallExpression(BoundCallExpression node) => VisitChildren(node);
    protected virtual void VisitBoundConversionExpression(BoundConversionExpression node) => VisitChildren(node);
    protected virtual void VisitBoundErrorExpression(BoundErrorExpression node) => VisitChildren(node);
    protected virtual void VisitBoundBlockStatement(BoundBlockStatement node) => VisitChildren(node);
    protected virtual void VisitBoundExpressionStatement(BoundExpressionStatement node) => VisitChildren(node);
    protected virtual void VisitBoundVariableDeclarationStatement(BoundVariableDeclarationStatement node) => VisitChildren(node);
    protected virtual void VisitBoundIfStatement(BoundIfStatement node) => VisitChildren(node);
    protected virtual void VisitBoundWhileStatement(BoundWhileStatement node) => VisitChildren(node);
    protected virtual void VisitBoundDoWhileStatement(BoundDoWhileStatement node) => VisitChildren(node);
    protected virtual void VisitBoundForStatement(BoundForStatement node) => VisitChildren(node);
    protected virtual void VisitBoundGotoStatement(BoundGotoStatement node) => VisitChildren(node);
    protected virtual void VisitBoundConditionalGotoStatement(BoundConditionalGotoStatement node) => VisitChildren(node);
    protected virtual void VisitBoundLabelStatement(BoundLabelStatement node) => VisitChildren(node);
    protected virtual void VisitBoundReturnStatement(BoundReturnStatement node) => VisitChildren(node);
    protected virtual void VisitBoundNopStatement(BoundNopStatement node) => VisitChildren(node);
    protected virtual void VisitBoundSequencePointStatement(BoundSequencePointStatement node) => VisitChildren(node);
}
